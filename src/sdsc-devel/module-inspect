#!/bin/env python

import commands
from optparse import OptionParser
import os
import os.path
import re
import sys

class Modulefile:
  """ A class that represents a single environment modulefile. """

  def __init__(self, path):
    """ Class constructor. """
    self._errors = {}
    self._programs = None
    self._libraries = None
    self._path = path
    command = "module display %s 2>&1" % path
    self._text = commands.getoutput(command)
    self._variablesMod = None
    self._variablesNew = None
    Modulefile.instances[path] = self
    if self._text.find('Unable to locate') >= 0:
      self._errors[path] = 'Modulefile not found'

  def addedLibraries(self):
    """
    Returns a dictionary of dynamic libraries made available by the
    modulefile.  Each key is the name of a library; the corresponding
    value is the full path to it.
    """

    if self._libraries == None:
      self._libraries = {}
      for addition in re.findall(r'(?:ap|pre)pend-path\s+LD_LIBRARY_PATH\b([^\n]*)', self._text):
        addition = addition.strip()
        if addition == '':
          self._errors['LD_LIBRARY_PATH'] = 'empty append'
          continue
        for path in addition.split(':'):
          if not os.path.isdir(path):
            self._errors[path] = 'No such path'
            continue
          for file in os.listdir(path):
            filePath = "%s/%s" % (path, file)
            if not os.access(filePath, os.R_OK) or \
               not re.match(r'^lib.*\.so(\.\d+)*$', file):
              continue
            self._libraries[file] = filePath
    return self._libraries

  def addedPrograms(self):
    """
    Returns a dictionary of programs made available by the modulefile.
    Each key is the name of a program; the corresponding value is the
    full path to it.
    """
    if self._programs == None:
      self._programs = {}
      for addition in re.findall(r'(?:ap|pre)pend-path\s+PATH\b([^\n]*)', self._text):
        addition = addition.strip()
        if addition == '':
          self._errors['PATH'] = 'empty append'
          continue
        for path in addition.split(':'):
          if not os.path.isdir(path):
            self._errors[path] = 'No such path'
            continue
          for file in os.listdir(path):
            filePath = "%s/%s" % (path, file)
            if not os.access(filePath, os.X_OK):
              continue
            self._programs[file] = filePath
    return self._programs

  def addedVariables(self):
    """
    Returns a dictionary of environment variables set by the modulefile.
    Each key is the name of an environment variable; the corresponding
    value is the assigned value.
    """
    if self._variablesNew == None:
      self._variablesNew = {}
      for (var, value) in re.findall(r'setenv\s+(\S+)([^\n]*)', self._text):
        if var == 'LD_LIBRARY_PATH' or var == 'PATH':
          # handled by addedLibraries/addedPrograms
          continue
        self._variablesNew[var] = value.strip()
    return self._variablesNew

  def errors(self):
    """
    Returns a dictionary of errors found within the modulefile.  Each key
    is the name of a resource incorrectly modified; the corresponding
    value describes the error.
    """
    self.addedPrograms()
    self.addedLibraries()
    self.addedVariables()
    self.modifiedVariables()
    return self._errors

  def modifiedVariables(self):
    """
    Returns a dictionary of environment variables modified by the modulefile.
    Each key is the name of an environment variable; the corresponding
    value is the appended/prepended value.
    """
    if self._variablesMod == None:
      self._variablesMod = {}
      for (var, value) in re.findall(r'(?:ap|pre)pend-path\s+(\S+)([^\n]*)', self._text):
        value = value.strip()
        if value == '':
          self._errors[var] = 'empty append'
          continue
        if var == 'LD_LIBRARY_PATH' or var == 'PATH':
          # handled by addedLibraries/addedPrograms
          continue
        self._variablesMod[var] = value
    return self._variablesMod

  def path(self):
    """ Returns the path used to instantiate the Modulefile instance. """
    return self._path

  @classmethod
  def findLibrary(cls, pattern):
    """
    A class method that returns a list of (Modulefile, path) tuples,
    representing the set of libraries provided by any known Modulefile
    that have a name matching the specified pattern.
    """
    result = []
    for m in Modulefile.instances.values():
      libs = m.addedLibraries()
      for k in libs.keys():
        if re.search(pattern, k):
          result.append((m, libs[k]))
    return result

  @classmethod
  def findProgram(cls, pattern):
    """
    A class method that returns a list of (Modulefile, path) tuples,
    representing the set of programs provided by any known Modulefile
    that have a name matching the specified pattern.
    """
    result = []
    for m in Modulefile.instances.values():
      progs = m.addedPrograms()
      for k in progs.keys():
        if re.search(pattern, k):
          result.append((m, progs[k]))
    return result

  @classmethod
  def findVariable(cls, pattern):
    """
    A class method that returns a list of (Module, name) tuples,
    representing the set of variables set by any known Modulefile
    that have a name matching the specified pattern.
    """
    result = []
    for m in Modulefile.instances.values():
      vars = m.addedVariables()
      for k in vars.keys():
        if re.search(pattern, k):
          result.append((m, k))
    return result

  @classmethod
  def initAll(cls):
    """
    A class method that creates a Modulefile instance for every
    modulefile accessible via the MODULEPATH environment variable.
    """
    for dir in os.environ['MODULEPATH'].split(':'):
      if not os.path.exists(dir):
        continue
      for subdir in os.listdir(dir):
        subdirPath = "%s/%s" % (dir, subdir)
        if not os.path.isdir(subdirPath):
          continue
        for file in os.listdir(subdirPath):
          filePath = "%s/%s" % (subdirPath, file)
          if os.path.isdir(filePath) or file.startswith('.'):
            continue
          m = Modulefile("%s/%s" % (subdir, file))

Modulefile.instances = {}

class ModuleInspect:
  """
  module-inspect - report resources provided by environment modules

  module-inspect [-h --version] [--errs=y/n] [--exact=y/n]
                 [--libs=y/n] [--match=string[,string...]]
                 [--progs=y/n] [--vars=y/n] [module ...]

    -h
      Show this information, then exit.

    --version
      Print version, then exit.

    --errs=y/n
    --libs=y/n
    --progs=y/n
    --vars=y/n
      Specify which resources to report--modulefile errors (e.g., references
      to non-existent directories), dynamic libraries, executable programs,
      and/or environment variables.  By default the program reports all of
      these; if one or more of these options is given explicitly, the others
      are not reported.

    --exact=y/n
      If 'y', treat the strings passed to --match as fixed strings to be
      matched exactly; otherwise, treat them as regular expressions.
      Default 'n'.

    --match=string[,string...]
      Report which, if any, of the listed modulefiles supplies resources
      that match the listed string(s).  If this option is not specified,
      the program reports all resources provided by all listed modules.

    module ...
      List of modules to inspect.  By default, the program inspects all
      available modules.
  """

  def __init__(self):
    """Class constructor."""

    parser = OptionParser('usage: %prog [options] [module ...]', add_help_option=False, version='%prog v1.0.0')
    parser.add_option('-h', '--help', action='store_true')
    parser.add_option('--errs', default='n')
    parser.add_option('--exact', default='n')
    parser.add_option('--match')
    parser.add_option('--libs', default='n')
    parser.add_option('--progs', default='n')
    parser.add_option('--vars', default='n')

    (options, args) = parser.parse_args()

    if options.help:
      help(self.__class__)
      sys.exit(0)

    if options.errs == 'n' and options.libs == 'n' and \
       options.progs == 'n' and options.vars == 'n':
      options.errs = 'y'
      options.libs = 'y'
      options.progs = 'y'
      options.vars = 'y'

    if len(args) == 0:
      Modulefile.initAll()
    else:
      for m in args:
        Modulefile(m)

    if options.match == None:
      for path in sorted(Modulefile.instances.keys()):
        module = Modulefile.instances[path]
        print path
        if options.progs != 'n':
          programs = module.addedPrograms()
          for program in sorted(programs.keys()):
            print "  program %s = %s" % (program, programs[program])
        if options.libs != 'n':
          libraries = module.addedLibraries()
          for library in sorted(libraries.keys()):
            print "  library %s = %s" % (library, libraries[library])
        if options.vars != 'n':
          variables = module.addedVariables()
          for variable in sorted(variables.keys()):
            print "  variable %s = %s" % (variable, variables[variable])
          variables = module.modifiedVariables()
          for variable in sorted(variables.keys()):
            print "  variable %s += %s" % (variable, variables[variable])
        if options.errs != 'n':
          errors = module.errors()
          for error in sorted(errors.keys()):
            print "  error %s = %s" % (error, errors[error])
    else:
      for str in options.match.split(','):
        if options.exact == 'y':
          str = "^%s$" % str
        if options.progs != 'n':
          for (module, path) in Modulefile.findProgram(str):
            print "program %s provided by %s" % (path.split('/')[-1], module.path())
        if options.libs != 'n':
          for (module, path) in Modulefile.findLibrary(str):
            print "library %s provided by %s" % (path.split('/')[-1], module.path())
        if options.vars != 'n':
          for (module, var) in Modulefile.findVariable(str):
            print "variable %s provided by %s" % (var, module.path())

ModuleInspect()
