#!/bin/env python

import re
import sys

class checkDescription:
  """
  check-description - Check correctness of DESCRIPTION recipe in Makefiles

  check-description [-h] [Makefile ...]

    -h
      Print this text, then exit.

    Makefile ...
      List of paths to Makefiles that should be checked.  Default ./Makefile.
  """

  def __init__(self):

    compilerModules = ('CC', 'CXX', 'F77', 'FC', 'PYTHON')
    makefiles = []

    for arg in sys.argv[1:]:
      if arg == '-h':
        help(checkDescription)
        sys.exit(0)
      else:
        makefiles.append(arg)

    if len(makefiles) == 0:
      makefiles.append('./Makefile')

    for makefile in makefiles:

      try:
        m = open(makefile, 'r')
      except:
        sys.stderr.write("Open of %s failed\n" % makefile)
        continue

      inDescriptionRecipe = False
      descriptionRecipe = ''
      describesExpected = ['PKG']

      for line in m:
        if line == '\n':
          inDescriptionRecipe = False
        elif line == 'DESCRIPTION:\n':
          inDescriptionRecipe = True
        elif inDescriptionRecipe:
          descriptionRecipe += "%s\n" % line
        else:
          matchInfo = re.search(r'MODULE_LOAD_(\w+)', line)
          if matchInfo and not matchInfo.group(1) in describesExpected:
            describesExpected.append(matchInfo.group(1))

      m.close()

      for module in describesExpected:
        if "$(DESCRIBE_%s)" % module in descriptionRecipe:
          print "%s DESCRIBE_%s: ok" % (makefile, module)
          if module in compilerModules:
            if "$(MODULE_LOAD_%s)" % module in descriptionRecipe:
              print "%s MODULE_LOAD_%s: ok" % (makefile, module)
            else:
              print "%s MODULE_LOAD_%s: missing" % (makefile, module)
        else:
          print "%s DESCRIBE_%s: missing" % (makefile, module)

      noContinuations = descriptionRecipe.replace("\\\n", '')

      for module in re.findall(r'\(DESCRIBE_(\w+)\)\s*[^\s>;\)]', noContinuations):
        print "%s DESCRIBE_%s: incomplete" % (makefile, module)

      for module in re.findall(r'\$\(MODULE_LOAD_(\w+)\)', descriptionRecipe):
        if module in compilerModules:
          continue
        if module == 'MKL' and 'MKL_ROOT' in descriptionRecipe:
          # Testing whether MKL is available
          continue
        print "%s MODULE_LOAD_%s: extraneous" % (makefile, module)

checkDescription()
