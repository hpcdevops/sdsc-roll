# This Makefile provides targets for building and testing unrestricted rolls
# from the SDSC roll stack using compilers from the SDSC gnucompiler-roll,
# rocks-openmpi from the Rocks hpc-roll, and the MKL libraries from the SDSC
# intel-roll.  Roll sources are retrieved from the SDSC github site.  Build
# and test timings are results are directed to a timestamped log file; detailed
# build output is allowed to flow to stdout.
#
# This Makefile defines these targets:
#
# (default) - build and test all rolls
#
# clean - uninstall and purge all rolls
#
# %-build-and-test - build and run the roll test for a single roll

# URL used for roll git clone
GIT_URL = https://github.com/sdsc/$(1)-roll.git

# Overrides of RollStack.mk default values
DEFAULT_GET = git clone $(GIT_URL) $($(1)_GITOPTS)
DEFAULT_PUT = git commit
DEFAULT_ROLLOPTS =

# ROLL{COMPILER,MPI} values for multi-{compiler,mpi} rolls
MULTI_COMPILER = gnu
MULTI_MPI = rocks-openmpi

# Roll-specific ROLLOPTS values
amber_ROLLOPTS = $(DEFAULT_ROLLOPTS) cuda

include $(SDSCDEVEL)/RollStack.mk
include $(SDSCDEVEL)/CommonRolls.mk

# Test user for packages where testing by root fails beccause of openmpi
# restrictions.  The mysql user is present by default on Rocks systems.
gamess_USER = mysql
nwchem_USER = mysql
openbabel_USER = mysql
siesta_USER = mysql
upc_USER = mysql

# data-transfer.t can only be run successfully by a user who can ssh to
# localhost without a passphrase.  Since no Rocks-defined user (including root)
# can normally do this, this variable may need to be overridden on the make
# command line.
data-transfer_USER = $(USER)
biotools_MAKE += ROLLOPTS='java8home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.31-1.b13.el6_6.x86_64'

mkl_MAKE = $(intel_MAKE) ROLLNAME=mkl

LOG_FILE = $(shell /bin/date +%F-%T-`basename $(THIS_MAKEFILE)`.log)

chemistry_MAKE += ROLLMPI=openmpi_eth
chemistry_PREREQS += mpi
llvm_MAKE += ROLLOPTS=clang=no
ALL_REREQS += mpi

VANILLA_ROLLS = mkl
$(foreach roll,$(ALL_ROLLS),$(if $(filter $(roll),$(RESTRICTED_ROLLS)),,$(eval VANILLA_ROLLS += $(roll))))
ALL_PREREQS += mkl

build-and-test-all:
	for F in $(VANILLA_ROLLS); do \
	  $(MAKE) LOG_FILE=$(LOG_FILE) -f $(THIS_MAKEFILE) $$F-build-and-test || true; \
	  if ! echo "$(ALL_PREREQS)" | grep -q "\<$$F\>"; then \
	    $(MAKE) -f $(THIS_MAKEFILE) $$F-uninstall; \
	  fi; \
	done

clean:
	for F in mkl $(VANILLA_ROLLS); do \
	  $(MAKE) -f $(THIS_MAKEFILE) $$F-clean || true; \
	done

%-build-and-test:
	if /bin/echo $(RESTRICTED_ROLLS) | /bin/grep -q "\<$(*)\>"; then \
	  /bin/echo === SKIP $(*) - restricted >> $(LOG_FILE); \
	elif test -x /root/rolltests/$(*).t; then \
	  /bin/echo === SKIP $(*) - preinstalled >> $(LOG_FILE); \
	else \
	  for F in $($(*)_PREREQS); do \
	    /bin/echo === PREREQ $(*) $$F `/bin/date +%F-%T` >> $(LOG_FILE); \
	    $(MAKE) -f $(THIS_MAKEFILE) LOG_FILE="$(LOG_FILE)" $$F-build-and-test || exit 2; \
	  done; \
	  /bin/echo === BUILD $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  $(MAKE) -f $(THIS_MAKEFILE) $(*)-build; \
	  if ! /bin/ls $(*)-roll/*.iso > /dev/null 2>&1; then \
	    /bin/echo === BUILD FAIL $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	    exit 1; \
	  fi; \
	  /bin/echo === BUILD OK $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  /bin/echo === INSTALL $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  $(MAKE) -f $(THIS_MAKEFILE) $(*)-install || true; \
	  for F in `find $(*)-roll/src -name post-[0-9]\* | sed 's!.*/!!'`; do \
	    if test -x /etc/rc.d/rocksconfig.d/$$F; then \
	      /etc/rc.d/rocksconfig.d/$$F; \
	    fi; \
	  done; \
	  /bin/echo === INSTALL OK $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  /bin/echo === TEST $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  $(MAKE) -f $(THIS_MAKEFILE) $(*)-test >> $(LOG_FILE) 2>&1; \
	  if test $$? -ne 0; then \
	    /bin/echo === TEST FAIL $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	    exit 2; \
	  fi; \
	  /bin/echo === TEST OK $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	fi

help:
	@/bin/echo -e \\n\
make/make build-and-test-all\\n\
"  Build all rolls in prerequisite order and run their roll tests. Saves"\\n\
'  output to $$(LOG_FILE), which has a default value of DATE-DIR.log.'\\n\
make clean\\n\
"  Uninstall and delete source of all rolls."\\n\
make help\\n\
"  This text."\\n\
make status\\n\
"  List the build/install status of all rolls."\\n\
make ROLL-build\\n\
"  Make ROLL's default target after first building and installing"\\n\
"  any prerequisites."\\n\
make ROLL-build-and-test\\n\
"  Build ROLL; if successful, run its roll test. Saves output to"\\n\
'  $$(LOG_FILE), which has a default value of DATE-DIR.log.'\\n\
make ROLL-clean\\n\
"  Uninstall ROLL and delete its source."\\n\
make ROLL-checknodes\\n\
"  Test for rpms built by ROLL that are not installed by its node file(s)."\\n\
make ROLL-commit\\n\
"  Commit changes to ROLL's source."\\n\
make ROLL-distclean\\n\
"  Make ROLL's distclean target."\\n\
make ROLL-install\\n\
"  Install the rpms produced by the roll build.  No post sections"\\n\
"  from the roll's node file(s) are executed."\\n\
make ROLL-packages\\n\
"  Display the packages installed by ROLL."\\n\
make ROLL-prepreqs\\n\
"  Build and install ROLL's prerequisite rolls,if any."\\n\
make ROLL-purge\\n\
"  Delete ROLL source."\\n\
make ROLL-roll\\n\
"  Retrieve ROLL source from archive."\\n\
make ROLL-test\\n\
"  Run /root/rolltests/ROLL.t."\\n\
make ROLL-uninstall\\n\
"  Uninstall the packages installed by ROLL."\\n\
make ROLL-vars\\n\
"  Display the make var values associated with ROLL."\\n

mkl-roll: intel-roll
	/bin/mv intel-roll mkl-roll

status:
	@for F in $(ALL_ROLLS); do \
	  display="$$F (non-vanilla)"; \
	  if /bin/echo $(VANILLA_ROLLS) | /bin/grep -q "\<$$F\>"; then \
	    display=$$F; \
	  fi; \
	  if test -x /root/rolltests/$$F.t; then \
	    /bin/echo "$$display (installed)"; \
	  elif /bin/ls $$F-roll/*.iso > /dev/null 2>&1; then \
	    /bin/echo "$$display (built)"; \
	  elif /bin/ls $$F-roll/build.log > /dev/null 2>&1; then \
	    /bin/echo "$$display (build failed)"; \
	  elif test -d $$F-roll; then \
	    /bin/echo "$$display (unbuilt)"; \
	  else \
	    /bin/echo "$$display (not present)"; \
	  fi; \
	done
