#!/bin/env python

import re
import subprocess
import sys
import time
from ScarScript import ScarScript

rocks = '/opt/rocks/bin/rocks'
zfs   = '/usr/sbin/zfs'

class userhist(ScarScript):
  """
  userhist - report usage history of users

  userhist [-d -h -q -v] [--count=int] [--dirs=path[,path...]] user ...

  This script displays information about user activity on the cluster:
  oldest and newest file modication times, most recent job submission,
  and gold account balances.

    --count=int
      Display a message every int files while walking directory trees.
      Default is zero, meaning no display.

    -d
      Display the system commands to collect user history, but don't
      execute them.

    --dirs=path[,path...]
      List of paths to search for file age data.  Defaults to /home/<user>.

    -h
      Show this information, then exit.

    -q
      Don't print system commands before executing them.

    -v
      Print version, then exit.
  """

  VERSION = '1.0'

  def __init__(self):

    (options, args) = self.parseArgs(['--count:i', '--dirs:s'])

    self.count = 0
    if options.count:
      self.count = options.count
    self.dirs = '/home/USER'
    if options.dirs:
      self.dirs = options.dirs

    if len(args) < 1:
      help(userhist)
      sys.exit(1)
      
    for user in args:

      balances = ''
      output = self.do("gbalance -u %s" % user).split("\n")
      for i in range(2, len(output)):
        pieces = re.split('\s+', output[i])
        balances += pieces[1] + '=' + pieces[2]
        
      latestJob = 'N/A'
      latestJobDate = ''
      latestJobTime = ''
      output = self.do(
        "glsjob -u %s --show JobId,ModificationTime" % user
      ).split("\n")
      for i in range(2, len(output)):
        pieces = re.split('\s+', output[i])
        if pieces[1] > latestJobDate or \
           (pieces[1] == latestJobDate and pieces[2] > latestJobTime):
          (latestJob, latestJobDate, latestJobTime) = \
            (pieces[0], pieces[1], pieces[2])

      if self.dirs == '':
        dirsToSearch = []
      else:
        dirsToSearch = self.dirs.replace('USER', user).split(',')
      earliestFileEpoch = 99999999999
      fileCount = 0
      latestFile = 'N/A'
      latestFileEpoch = 0

      for dir in dirsToSearch:
        child = subprocess.Popen(
          "sudo -u %s find %s -type f -exec stat -c '%%Z %%n' {} \\;" %
          (user, dir),
          shell = True,
          stderr = subprocess.STDOUT,
          stdout = subprocess.PIPE
        )
        for file in child.stdout:
          (epoch, path) = re.split('\s+', file, 1)
          epoch = int(epoch)
          if epoch < earliestFileEpoch:
            earliestFileEpoch = epoch
          if file.find('/.') >= 0:
            continue
          fileCount += 1
          if self.count != 0 and fileCount % self.count == 0:
            print "%s: %d files" % (dir, fileCount)
          if epoch > latestFileEpoch:
            latestFile = path.strip()
            latestFileEpoch = epoch

      print "%s: %s %s %s %s %d %s %s" % (
              user,
              time.strftime("%Y-%m-%d", time.localtime(earliestFileEpoch)),
              balances, latestJobDate, latestJob, fileCount,
              time.strftime("%Y-%m-%d", time.localtime(latestFileEpoch)),
              latestFile
            )

userhist()
