#!/bin/env python

import commands
import sys
from ScarScript import ScarScript

class addInterface(ScarScript):
  """
  addInterface - add an interface definition to a node with an IP address
                 that matches appropriate octets of its existing interfaces

  addInterface [-d -h -q -v] host interface subnet dns [vlanid]

  Options:
    -d
      Display the system commands to create the interface, but don't do them.

    -h
      Show this information, then exit.

    -q
      Don't print system commands before executing them.

    -v
      Print version, then exit

    dns
      DNS name of the new interface.

    host
      Host name on which to define the interface.

    interface
      Name of the interface to define.

    subnet
      Rocks name of the interface subnet.

    vlanid
      Optional VLAN id for the interface.
  """

  VERSION = '1.0'

  def __init__(self):

    (options, args) = self.parseArgs([])
    if len(args) < 4 or len(args) > 5:
      help(addInterface)
      sys.exit(1)
    self.host = args[0]
    self.iface = args[1]
    self.subnetName = args[2]
    self.dns = args[3]
    self.vlan = None
    if len(args) == 5:
      self.vlan = args[4]

    # get the subnet and mask and info about the target host from the rocks DB
    subnet = commands.getoutput(
      "rocks list network %s | sed '1d' | awk ' {print $1}'" % self.subnetName
    )
    subnetNetmask = commands.getoutput(
      "rocks list network %s | sed '1d' | awk ' {print $2}'" % self.subnetName
    )
    hostPrivateIP = commands.getoutput(
      "rocks list host interface %s | grep 'eth0 ' | awk ' {print $4}'" %
      self.host
    )

    subnetOctets = subnet.split('.')
    subnetNetmaskOctets = subnetNetmask.split('.')
    hostPrivateIPOctets = hostPrivateIP.split('.')
    hostInterfaceIPOctets = [ ]

    for i in range(4):
      hostInterfaceIPOctets.append(
        str((int(hostPrivateIPOctets[i]) & ~int(subnetNetmaskOctets[i])) |
            int(subnetOctets[i]))
      )

    command = \
      "rocks add host interface %s %s ip=%s name=%s subnet=%s" % \
      (self.host, self.iface, ".".join(hostInterfaceIPOctets),
       self.dns, self.subnetName)
    if self.vlan:
      command += " vlan=" + self.vlan
    self.do(command)

addInterface()
