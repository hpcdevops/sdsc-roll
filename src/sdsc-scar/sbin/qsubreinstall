#!/bin/env python

import commands
import os
import sys
from ScarScript import ScarScript

class qsubreinstall(ScarScript):
  """
  qsubreinstall - submit a job to reinstall one or more nodes

  qsubreinstall [-d -h -q -v] [--node=pattern] [--all] [--queue=name] user

    -d
      Display the system commands to do the submission, but don't execute them.

    -h
      Show this information, then exit.

    -q
      Don't print system commands before executing them.

    -v
      Print version, then exit

    --all
      Submit to all selected nodes instead of just one

    --node
      Run on nodes that match pattern; default '.'

    --queue
      Submission queue; default 'reinstall'

    user
      The id of a user account to use for the submission

  """

  def __init__(self):

    (options, args) = self.parseArgs(['--all', '--node:s', '--queue:s'])
    self.all = False
    if options.all:
      self.all = True
    self.nodepat = '.'
    if options.node:
      self.nodepat = options.node
    self.queue = 'reinstall'
    if options.queue:
      self.queue = options.queue
    if len(args) == 0:
      help(qsubreinstall)
      sys.exit(0)
    self.user = args[0]

    (status, output) = \
      commands.getstatusoutput("grep '^%s:' /etc/passwd" % self.user)
    if status != 0:
      print 'user %s does not exist' % self.user
      sys.exit(1)
    else:
      self.userhome = output.split(':')[-2]

    command = "pbsnodes -l all | grep -v -E 'down|offline' | grep '%s' | awk ' {print $1}'" % self.nodepat
    nodes = commands.getoutput(command).split("\n")
    if nodes[0] == '':
      print "No up nodes selected by '%s'" % self.nodepat
      sys.exit(1)

    pid = str(os.getpid())
    for node in nodes:
      command = "pbsnodes -a %s | grep '^ *np *=' |awk -F= ' {print $2}'" % node
      np = self.do(command).strip()
      script = 'reinstall-%s-%s.qsub' % (pid, node)
      rootpath = '/root/%s' % script
      userpath = '/%s/%s' % (self.userhome, script)
      f = open(rootpath, 'w')
      f.write("#!/bin/bash\n")
      f.write("#PBS -e %s.err\n" % userpath)
      f.write("#PBS -o %s.out\n" % userpath)
      f.write("#PBS -p 1023\n")
      f.write("#PBS -l nodes=1:ppn=%s,walltime=00:10:00,host=%s\n" % (np, node))
      f.write("#PBS -q %s\n" % self.queue)
      f.write('/bin/logger -p local0.alert "PXE Rebooting via PBS job at `date`"\n')
      f.write("/bin/rm -f %s\n" % userpath)
      f.write("/boot/kickstart/cluster-kickstart-pxe\n")
      f.close()
      self.do("/bin/chmod go+r %s" % rootpath)
      command = "/bin/cp %s %s" % (rootpath, userpath)
      self.do("/usr/bin/sudo -u %s %s" % (self.user, command))
      self.do("/bin/rm -f %s" % rootpath)
      self.do(self.ssh(node, "usermod -G wheel %s" % self.user))
      command = "qsub %s" % userpath
      self.do("/usr/bin/sudo -u %s %s" % (self.user, command))
      if not self.all:
        break

qsubreinstall()
